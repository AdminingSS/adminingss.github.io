Vue.use(Vuex);
var cartStore = new Vuex.Store({
    state: {
        tickets: {},
        cartId: '',
        deadline: null,
        cookies: new Cookie()
    },
    mutations: {
        set: function (state, _ref) {
            var self = this;

            if (_ref.type == 'tickets') {
                Object.values(_ref.value).forEach(function(em){
                    if (!em.created_at) {
                        em.deadline_at = 0;
                        return;
                    }
                    em.deadline_at = new Date(em.created_at);
                    /*if ( !em.timer )
                        em.timer = setTimeout(function(){
                            self.dispatch('deleteFromCart', em.carryall_id);
                        }, ( em.deadline_at - (new Date()) ) );
                        */
                    _ref.value[em.carryall_id] = em;
                });
            }
            state[_ref.type] = _ref.value;
        }
    },
    getters: {
        countTickets: function(state) {
            var tickets = Object.values(state.tickets);
            return tickets.reduce(function(sum, current) {
              return sum + (current.sector=='present' || current.event_location.indexOf('certificate') != -1 ? 0 : current.count);
            }, 0);
        },

        countAll: function(state) {
            var tickets = Object.values(state.tickets);
            return tickets.reduce(function(sum, current) {
              return sum + current.count;
            }, 0);
        },

        ticketsBundle: function(state) {
            if (!state.tickets)
                return {}
            var tickets = Object.values(state.tickets);

            var groups = tickets.reduce(function (r, a) {
                var gr = a.group_ids.join('');
                r[gr] = r[gr] || [];
                r[gr].push(a);
                return r;
            }, Object.create(null));

            return Object.values(groups).sort(function(a, b){
                if (a[0].created_at < b[0].created_at)
                    return 1;
                if (a[0].created_at > b[0].created_at)
                    return -1;
                return 0;
            })
        }
    },

    actions: {
        getTickets: function(context, needRenderMap) {
            var self = this;
            var url = '/basket/baskets/'+this.state.cartId+'/';
            Vue.http.get(url).then(function (response) {
                if (response.body.tickets) {
                    self.commit('set', {type: 'tickets', value: response.body.tickets});
                }

                if (needRenderMap) needRenderMap();
            }, function(response){
                self.commit('set', {type: 'cartId', value: ''});
                self.commit('set', {type: 'tickets', value: {} });

                if (needRenderMap) needRenderMap();
            });
        },
        getCartId: function(context) {
            var cartId = this.state.cookies.getItem('basket_uuid');
            this.commit('set', {type: 'cartId', value: cartId});
        },

        addToCart: function(context, payload) {
            var self = this;
            var data = payload.ticket;

            $('.cart_submit__wrp').addClass('loading');
            var toUpsertMultiple = !!data.is_multipled && !!self.state.tickets[data.carryall_id];
            if (data.is_multipled && data.count == 0 && !toUpsertMultiple) return;

            Vue.set(self.state.tickets, data.carryall_id, data);
            self.commit('set', { type: 'tickets', value: self.state.tickets });

            if ( !self.state.cartId ) {
                Vue.http.post('/basket/baskets/', {}).then( function(response){
                    self.commit('set', {type: 'cartId', value: response.body.uuid});
                    payload.ticket.basket_uuid = response.body.uuid;
                    Vue.delete(self.state.tickets, data.carryall_id);
                    self.commit('set', { type: 'tickets', value: self.state.tickets });
                    self.dispatch('addToCart', payload);
                }, function (response) {});
                return;
            }

            if ( toUpsertMultiple ) {
                this.dispatch('upsertMultiple', payload);
                return;
            }

            $.ajax({
                url: '/basket/tickets/',
                method: 'post',
                async: false,
                data: JSON.stringify(data),
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                success: function() {
                    $('.cart_submit__wrp').removeClass('loading');
                    if (payload.callback)
                        payload.callback.call();

                    // Зум билетов при добавлении в моб. корзине
                    if ($(".bottom_cart__element").length) {
                        setTimeout(function () {
                            var elem = $('.bottom_cart__element[style*="order: ' + just_added_id +'"] .bottom_cart__wp'),
                                start = Date.now(),
                                scale = 3;

                            var timer = setInterval(function() {
                                var timePassed = Date.now() - start;
                                scale = scale - scale * .1;

                                if (scale < 1) {
                                    clearInterval(timer);
                                    scale = 1;
                                }

                                elem.css("transform", "scale(" + scale + ")");
                            }, 30);
                        }, 300);
                    }
                }
            });

            if ($("#map").length) {
                $('.cart-popup').addClass('active-mobile');
            }

            sendsayCart();
        },

        addGroupToCart: function(context, payload) {
            var self = this;
            var tickets = payload.tickets;
            var ids = payload.ids;

            if ( !self.state.cartId ) {
                Vue.http.post('/basket/baskets/', {}).then( function(response){
                    self.commit('set', {type: 'cartId', value: response.body.uuid});
                    tickets.forEach(function(em){
                        var data = createTicketData(em);
                        data.group_ids = ids;
                        self.dispatch('addToCart', {ticket: data});
                    });
                }, function (response) {});
                return;
            }

            tickets.forEach(function(em){
                var data = createTicketData(em);
                data.group_ids = ids;
                self.dispatch('addToCart', {ticket: data});
            });

        },

        upsertMultiple: function(context, payload) {
            var data = payload.ticket;
            if (data.count == 0) {
                this.dispatch('deleteFromCart', data.carryall_id);
                return;
            }
            var self = this;

            Vue.http.put('/basket/tickets/'+data.carryall_id+'/', data).then(function(response){
                $('.cart_submit__wrp').removeClass('loading');
                if (payload.callback)
                    payload.callback.call();
            }, function(response){});

            //Vue.set(this.state.tickets, data.carryall_id, data);
            //this.commit('set', { type: 'tickets', value: this.state.tickets });
            sendsayCart();
        },

        deleteFromCart: function(context, id) {
            $('.cart_submit__wrp').addClass('loading');
            Vue.http.delete('/basket/tickets/'+ this.state.cookies.getItem('basket_uuid') +'_'+ id+'/').then(function(response){
                $('.cart_submit__wrp').removeClass('loading');
            });
            Vue.delete(this.state.tickets, id);
            this.commit('set', { type: 'tickets', value: this.state.tickets });
            sendsayCart();
        }

    }
});
